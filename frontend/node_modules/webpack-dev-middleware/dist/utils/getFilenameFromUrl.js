"use strict";

const path = require("path");
<<<<<<< HEAD

const {
  parse
} = require("url");

const querystring = require("querystring");

const getPaths = require("./getPaths");
/** @typedef {import("../index.js").IncomingMessage} IncomingMessage */

/** @typedef {import("../index.js").ServerResponse} ServerResponse */


const cacheStore = new WeakMap();
/**
 * @template T
 * @param {Function} fn
 * @param {{ cache?: Map<string, { data: T }> } | undefined} cache
 * @param {(value: T) => T} callback
 * @returns {any}
 */
// @ts-ignore

const mem = (fn, {
  cache = new Map()
} = {}, callback) => {
  /**
   * @param {any} arguments_
   * @return {any}
   */
  const memoized = (...arguments_) => {
    const [key] = arguments_;
    const cacheItem = cache.get(key);

    if (cacheItem) {
      return cacheItem.data;
    }

    let result = fn.apply(void 0, arguments_);
    result = callback(result);
    cache.set(key, {
      data: result
    });
    return result;
  };

  cacheStore.set(memoized, cache);
  return memoized;
}; // eslint-disable-next-line no-undefined


const memoizedParse = mem(parse, undefined, value => {
=======
const {
  parse
} = require("url");
const querystring = require("querystring");
const getPaths = require("./getPaths");
const memorize = require("./memorize");

/** @typedef {import("../index.js").IncomingMessage} IncomingMessage */
/** @typedef {import("../index.js").ServerResponse} ServerResponse */

// eslint-disable-next-line no-undefined
const memoizedParse = memorize(parse, undefined, value => {
>>>>>>> 645159db (Creator Page Started)
  if (value.pathname) {
    // eslint-disable-next-line no-param-reassign
    value.pathname = decode(value.pathname);
  }
<<<<<<< HEAD

  return value;
});
const UP_PATH_REGEXP = /(?:^|[\\/])\.\.(?:[\\/]|$)/;
=======
  return value;
});
const UP_PATH_REGEXP = /(?:^|[\\/])\.\.(?:[\\/]|$)/;

>>>>>>> 645159db (Creator Page Started)
/**
 * @typedef {Object} Extra
 * @property {import("fs").Stats=} stats
 * @property {number=} errorCode
<<<<<<< HEAD
=======
 * @property {boolean=} immutable
>>>>>>> 645159db (Creator Page Started)
 */

/**
 * decodeURIComponent.
 *
 * Allows V8 to only deoptimize this fn instead of all of send().
 *
 * @param {string} input
 * @returns {string}
 */

function decode(input) {
  return querystring.unescape(input);
}
<<<<<<< HEAD
/**
 * @template {IncomingMessage} Request
 * @template {ServerResponse} Response
 * @param {import("../index.js").Context<Request, Response>} context
=======

// TODO refactor me in the next major release, this function should return `{ filename, stats, error }`
// TODO fix redirect logic when `/` at the end, like https://github.com/pillarjs/send/blob/master/index.js#L586
/**
 * @template {IncomingMessage} Request
 * @template {ServerResponse} Response
 * @param {import("../index.js").FilledContext<Request, Response>} context
>>>>>>> 645159db (Creator Page Started)
 * @param {string} url
 * @param {Extra=} extra
 * @returns {string | undefined}
 */
<<<<<<< HEAD


=======
>>>>>>> 645159db (Creator Page Started)
function getFilenameFromUrl(context, url, extra = {}) {
  const {
    options
  } = context;
  const paths = getPaths(context);
<<<<<<< HEAD
  /** @type {string | undefined} */

  let foundFilename;
  /** @type {URL} */

  let urlObject;

=======

  /** @type {string | undefined} */
  let foundFilename;
  /** @type {URL} */
  let urlObject;
>>>>>>> 645159db (Creator Page Started)
  try {
    // The `url` property of the `request` is contains only  `pathname`, `search` and `hash`
    urlObject = memoizedParse(url, false, true);
  } catch (_ignoreError) {
    return;
  }
<<<<<<< HEAD

  for (const {
    publicPath,
    outputPath
=======
  for (const {
    publicPath,
    outputPath,
    assetsInfo
>>>>>>> 645159db (Creator Page Started)
  } of paths) {
    /** @type {string | undefined} */
    let filename;
    /** @type {URL} */
<<<<<<< HEAD

    let publicPathObject;

=======
    let publicPathObject;
>>>>>>> 645159db (Creator Page Started)
    try {
      publicPathObject = memoizedParse(publicPath !== "auto" && publicPath ? publicPath : "/", false, true);
    } catch (_ignoreError) {
      // eslint-disable-next-line no-continue
      continue;
    }
<<<<<<< HEAD

=======
>>>>>>> 645159db (Creator Page Started)
    const {
      pathname
    } = urlObject;
    const {
      pathname: publicPathPathname
    } = publicPathObject;
<<<<<<< HEAD

=======
>>>>>>> 645159db (Creator Page Started)
    if (pathname && pathname.startsWith(publicPathPathname)) {
      // Null byte(s)
      if (pathname.includes("\0")) {
        // eslint-disable-next-line no-param-reassign
        extra.errorCode = 400;
        return;
<<<<<<< HEAD
      } // ".." is malicious


=======
      }

      // ".." is malicious
>>>>>>> 645159db (Creator Page Started)
      if (UP_PATH_REGEXP.test(path.normalize(`./${pathname}`))) {
        // eslint-disable-next-line no-param-reassign
        extra.errorCode = 403;
        return;
<<<<<<< HEAD
      } // Strip the `pathname` property from the `publicPath` option from the start of requested url
      // `/complex/foo.js` => `foo.js`
      // and add outputPath
      // `foo.js` => `/home/user/my-project/dist/foo.js`


      filename = path.join(outputPath, pathname.slice(publicPathPathname.length));

      try {
        // eslint-disable-next-line no-param-reassign
        extra.stats =
        /** @type {import("fs").statSync} */
        context.outputFileSystem.statSync(filename);
=======
      }

      // Strip the `pathname` property from the `publicPath` option from the start of requested url
      // `/complex/foo.js` => `foo.js`
      // and add outputPath
      // `foo.js` => `/home/user/my-project/dist/foo.js`
      filename = path.join(outputPath, pathname.slice(publicPathPathname.length));
      try {
        // eslint-disable-next-line no-param-reassign
        extra.stats = context.outputFileSystem.statSync(filename);
>>>>>>> 645159db (Creator Page Started)
      } catch (_ignoreError) {
        // eslint-disable-next-line no-continue
        continue;
      }
<<<<<<< HEAD

      if (extra.stats.isFile()) {
        foundFilename = filename;
=======
      if (extra.stats.isFile()) {
        foundFilename = filename;

        // Rspack does not yet support `assetsInfo`, so we need to check if `assetsInfo` exists here
        if (assetsInfo) {
          const assetInfo = assetsInfo.get(pathname.slice(publicPathObject.pathname.length));

          // eslint-disable-next-line no-param-reassign
          extra.immutable = assetInfo ? assetInfo.immutable : false;
        }
>>>>>>> 645159db (Creator Page Started)
        break;
      } else if (extra.stats.isDirectory() && (typeof options.index === "undefined" || options.index)) {
        const indexValue = typeof options.index === "undefined" || typeof options.index === "boolean" ? "index.html" : options.index;
        filename = path.join(filename, indexValue);
<<<<<<< HEAD

        try {
          // eslint-disable-next-line no-param-reassign
          extra.stats =
          /** @type {import("fs").statSync} */
          context.outputFileSystem.statSync(filename);
=======
        try {
          // eslint-disable-next-line no-param-reassign
          extra.stats = context.outputFileSystem.statSync(filename);
>>>>>>> 645159db (Creator Page Started)
        } catch (__ignoreError) {
          // eslint-disable-next-line no-continue
          continue;
        }
<<<<<<< HEAD

=======
>>>>>>> 645159db (Creator Page Started)
        if (extra.stats.isFile()) {
          foundFilename = filename;
          break;
        }
      }
    }
<<<<<<< HEAD
  } // eslint-disable-next-line consistent-return


  return foundFilename;
}

=======
  }

  // eslint-disable-next-line consistent-return
  return foundFilename;
}
>>>>>>> 645159db (Creator Page Started)
module.exports = getFilenameFromUrl;